#+title: Literate Dotfile Configuration

* Dotfile Literate Configuration
:PROPERTIES:
:UNNUMBERED: t
:COMMENT: setting to t doesnt seem to work
:END:

Here in _the garden_ lies my digital self, amongst the bees and tings and flowers... and the wall...
This config is (so far) only for Apple Mx machine.
It's not only Apple computer.
Some aspects (hardware, keyboards, talon) are independent.
I includem aspects here too -- 'em part of my config.

Welcome to this document. It's written in the style of `literate programming`.
(shout out Donald Knuth)

This document is an `Org` file. It ends with ".org". It's a mix of writing and code. Just some symbols...

This file actively works as the
"single source of truth"
for settin up me macheens.

Every time I change something... it is /described/ here.
The code is then /tangled/.

If ur readin in a HTML web browser, u only see de /basic/ code block. You're missing the magic of `Org`.
irl (in emacs world) the code blocks are *linked* to certain files. (aka `tangled`, ie automatic export to a file)
You gotta read it in emacs to really see. One of these lifetimes, emacs will find you.

The /tangle/ of code /within/ these writings... It feels...
...as Donald said: [I'm paraphrasing]
#+begin_src
    your code should tell a story
#+end_src

* How to use
Run the helper !!M-x literate-config-export!! to save, tangle and ~chezmoi apply~.

* Physical
** hands & keyboard
Before install anyting... check ya hands an keys.
*** hands
touch type 1.0 accuracy. slow
backspace === push/pull-up
*** keyboards
**** adv360
no cap labels. let the keys come to you
home-row-mods
colemak-dh

Customization of the Kinesis Advantage 360 is in a separate repo:
https://github.com/antoaenono/key-zmk-adv360pro
**** built-in keeb
Handled below due to sequential nature of `tangle`.

** voice, face, eyes, body
talon

* Digital
** Install
*** First, get chezmoi!
Here are a few steps:
1. get ~chezmoi~ installed and
2. fetch moi =dotfiles=
   
**** Homebrew
MacPorts...? I'm too late.
First, we need to be able to brew.

#+begin_src shell
echo "Install `homebrew` via blindly trusting script..."
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
#+end_src

***** Notes on the install script
- creates a bunch of dirs
- installs xcode command line tools
- need to hit return to continue
- output message after installing xcode:
 
Run these commands in your terminal to add Homebrew to your PATH:
#+begin_example
echo >> /Users/antoaenono/.zprofile
echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> /Users/antoaenono/.zprofile
eval "$(/opt/homebrew/bin/brew shellenv)"
#+end_example

- Run brew help to get started
- Further documentation:
https://docs.brew.sh
- type `brew` or `man brew` to learn more

**** chezmoi
#+begin_src shell
brew install chezmoi
#+end_src

**** dotfiles
`chezmoi` /is/ my dotfiles
#+begin_src shell
git clone github.com/antoaenono/dotfiles.git ~/.local/share/chezmoi
#+end_src


*** chezmoi install rest

The =.chezmoiscripts=[fn:1] directory contains scripts which are not copied to =$HOME=.

**** JankyBorders
#+begin_src shell
brew tap FelixKratz/formulae
brew install borders
#+end_src

**** bitwarden
***** SSH agent
This environment variable needs to be set to defer to Bitwarden's SSH agent on `commit` and `push`.
#+begin_src shell
export SSH_AUTH_SOCK=/Users/antoaenono/Library/Containers/com.bitwarden.desktop/Data/.bitwarden-ssh-agent.sock
#+end_src

**** AeroSpace
#+begin_src shell
brew tap nikitabobko/aerospace
brew install --cask nikitabobko/tap/aerospace
#+end_src
**** emacs
***** mac standalone application
https://github.com/jimeh/emacs-builds
#+begin_src
brew tap jimeh/emacs-builds
brew install --cask jimeh/emacs-builds/emacs-app
#+end_src

***** doom
****** add `doom` command to PATH
in zshrc:
#+begin_src shell
# add `doom` helper command to PATH
export PATH="$HOME/.emacs.d/bin:$PATH"
echo "`doom` added to path: eg `doom sync`"
#+end_src
**** ollama
***** homebrew
****** CLI only
#+begin_src shell
brew install ollama
#+end_src

****** GUI
#+begin_src shell
brew install --cask ollama-app
#+end_src

***** official installer from website
  https://ollama.com/download
  installs both CLI and GUI

**** zsh
#+begin_example
sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
#+end_example

***** help
~alias~ to show all aliases

***** starship
#+begin_example
curl -sS https://starship.rs/install.sh | sh
#+end_example

** Configure
*** AeroSpace
**** Commands
All commands: https://nikitabobko.github.io/AeroSpace/commands

Run commands from:
1. terminal (prefix with ~aerospace~)
2. key binding
 
If shell completion is working, try ~aerospace TAB~ to see all commands.

Example: open terminal with alt + enter shortcut (like in i3)
https://nikitabobko.github.io/AeroSpace/commands#exec-and-forget
#+begin_example
alt-enter = '''exec-and-forget osascript -e '
tell application "Terminal"
    do script
    activate
end tell'
'''
#+end_example

**** Startup
#+begin_src toml :tangle "./dot_config/aerospace/aerospace.toml"
start-at-login = true

# https://github.com/FelixKratz/JankyBorders 
after-startup-command = [
  'exec-and-forget borders active_color=0xffe1e3e4 inactive_color=0xff494d64 width=7.0'
]
#+end_src

**** Properties
#+begin_src toml :tangle "./dot_config/aerospace/aerospace.toml"
# Focus: mouse follow
#on-focused-monitor-changed = ['move-mouse monitor-lazy-center'] # follow monitor
on-focus-changed = ['move-mouse window-lazy-center'] # follow window
# https://nikitabobko.github.io/AeroSpace/commands#move-mouse
# https://nikitabobko.github.io/AeroSpace/guide#on-focus-changed-callbacks

# Window: layouts
# https://nikitabobko.github.io/AeroSpace/guide#layouts
default-root-container-layout = 'tiles' # tiles|accordion
default-root-container-orientation = 'auto' # horizontal|vertical|auto
# auto: wide monitor => horizontal, tall monitor => vertical
accordion-padding = 30

# Window: tree structure for containers: normalization property
# https://nikitabobko.github.io/AeroSpace/guide#normalization
enable-normalization-flatten-containers = true
enable-normalization-opposite-orientation-for-nested-containers = true

# Misc:
# Toggle off macOS "Hide application", useful if accidentally hit cmd-h
# https://nikitabobko.github.io/AeroSpace/goodies#disable-hide-app
automatically-unhide-macos-hidden-apps = true
#+end_src

Key-mapping
- don't think I need this any more...
- not sure what it's for since we override main mode
#+begin_src toml
# https://nikitabobko.github.io/AeroSpace/guide#key-mapping
# [key-mapping]
#     preset = 'qwerty' # qwerty|dvorak|colemak
#+end_src

Gaps
#+begin_src toml :tangle "./dot_config/aerospace/aerospace.toml"
# Gaps between windows (inner-*) and between monitor edges (outer-*).
# Possible values:
# - Constant:     gaps.outer.top = 8
# - Per monitor:  gaps.outer.top = [{ monitor.main = 16 }, { monitor."some-pattern" = 32 }, 24]
#                 In this example, 24 is a default value when there is no match.
#                 Monitor pattern is the same as for 'workspace-to-monitor-force-assignment'.
#                 See:
#                 https://nikitabobko.github.io/AeroSpace/guide#assign-workspaces-to-monitors
[gaps]
    # inner.horizontal = 0
    # inner.vertical =   0
    outer.left =       1
    outer.bottom =     1
    outer.top =        1
    outer.right =      1
#+end_src

**** Key Bindings
***** Key Syntax
- Letters.        a, b, c, ..., z
- Numbers.        0, 1, 2, ..., 9
- Keypad numbers. keypad0, keypad1, keypad2, ..., keypad9
- F-keys.         f1, f2, ..., f20
- Special keys.   minus, equal, period, comma, slash, backslash, quote, semicolon,
                  backtick, leftSquareBracket, rightSquareBracket, space, enter, esc,
                  backspace, tab, pageUp, pageDown, home, end, forwardDelete,
                  sectionSign (ISO keyboards only, european keyboards only)
- Keypad special. keypadClear, keypadDecimalMark, keypadDivide, keypadEnter, keypadEqual,
                  keypadMinus, keypadMultiply, keypadPlus
- Arrows.         left, down, up, right
- Modifiers.      cmd, alt, ctrl, shift

***** Main Mode
#+begin_src toml :tangle "./dot_config/aerospace/aerospace.toml"
[mode.main.binding]
    # Modes  https://nikitabobko.github.io/AeroSpace/commands#mode
    # You can make up any kind of mode you want!
    # https://nikitabobko.github.io/AeroSpace/guide#binding-modes
    ctrl-alt-shift-semicolon = 'mode service'

    # Layout https://nikitabobko.github.io/AeroSpace/commands#layout
    cmd-alt-period= 'layout accordion vertical horizontal' 
    cmd-alt-slash = 'layout tiles horizontal vertical'

    # Focus https://nikitabobko.github.io/AeroSpace/commands#focus
    cmd-alt-h = 'focus left'
    cmd-alt-left = 'focus left'
    cmd-alt-j = 'focus down'
    cmd-alt-down = 'focus down'
    cmd-alt-k = 'focus up'
    cmd-alt-up= 'focus up'
    cmd-alt-l = 'focus right'
    cmd-alt-right = 'focus right'

    # Move https://nikitabobko.github.io/AeroSpace/commands#move
    ctrl-alt-shift-h = 'move left'
    ctrl-alt-shift-left = 'move left'
    ctrl-alt-shift-j = 'move down'
    ctrl-alt-shift-down = 'move down'
    ctrl-alt-shift-k = 'move up'
    ctrl-alt-shift-up = 'move up'
    ctrl-alt-shift-l = 'move right'
    ctrl-alt-shift-right = 'move right'

    # Resize https://nikitabobko.github.io/AeroSpace/commands#resize
    cmd-alt-minus = 'resize smart -50'
    cmd-alt-equal = 'resize smart +50'

    # Workspace show https://nikitabobko.github.io/AeroSpace/commands#workspace
    cmd-alt-1 = 'workspace 1'
    cmd-alt-2 = 'workspace 2'
    cmd-alt-3 = 'workspace 3'
    cmd-alt-4 = 'workspace 4'
    cmd-alt-5 = 'workspace 5'
    cmd-alt-6 = 'workspace 6'
    cmd-alt-7 = 'workspace 7'
    cmd-alt-8 = 'workspace 8'
    cmd-alt-9 = 'workspace 9'
    cmd-alt-a = 'workspace A'
    cmd-alt-b = 'workspace B'
    cmd-alt-c = 'workspace C'
    cmd-alt-d = 'workspace D'
    cmd-alt-e = 'workspace E'
    cmd-alt-f = 'workspace F'
    cmd-alt-g = 'workspace G'
    cmd-alt-i = 'workspace I'
    cmd-alt-m = 'workspace M'
    cmd-alt-n = 'workspace N'
    cmd-alt-o = 'workspace O'
    cmd-alt-p = 'workspace P'
    cmd-alt-q = 'workspace Q'
    cmd-alt-r = 'workspace R'
    cmd-alt-s = 'workspace S'
    cmd-alt-t = 'workspace T'
    cmd-alt-u = 'workspace U'
    cmd-alt-v = 'workspace V'
    cmd-alt-w = 'workspace W'
    cmd-alt-x = 'workspace X'
    cmd-alt-y = 'workspace Y'
    cmd-alt-z = 'workspace Z'

    # Workspace move https://nikitabobko.github.io/AeroSpace/commands#move-node-to-workspace
    ctrl-alt-cmd-1 = 'move-node-to-workspace 1'
    ctrl-alt-cmd-2 = 'move-node-to-workspace 2'
    ctrl-alt-cmd-3 = 'move-node-to-workspace 3'
    ctrl-alt-cmd-4 = 'move-node-to-workspace 4'
    ctrl-alt-cmd-5 = 'move-node-to-workspace 5'
    ctrl-alt-cmd-6 = 'move-node-to-workspace 6'
    ctrl-alt-cmd-7 = 'move-node-to-workspace 7'
    ctrl-alt-cmd-8 = 'move-node-to-workspace 8'
    ctrl-alt-cmd-9 = 'move-node-to-workspace 9'
    ctrl-alt-cmd-a = 'move-node-to-workspace A'
    ctrl-alt-cmd-b = 'move-node-to-workspace B'
    ctrl-alt-cmd-c = 'move-node-to-workspace C'
    ctrl-alt-cmd-d = 'move-node-to-workspace D'
    ctrl-alt-cmd-e = 'move-node-to-workspace E'
    ctrl-alt-cmd-f = 'move-node-to-workspace F'
    ctrl-alt-cmd-g = 'move-node-to-workspace G'
    ctrl-alt-cmd-i = 'move-node-to-workspace I'
    ctrl-alt-cmd-m = 'move-node-to-workspace M'
    ctrl-alt-cmd-n = 'move-node-to-workspace N'
    ctrl-alt-cmd-o = 'move-node-to-workspace O'
    ctrl-alt-cmd-p = 'move-node-to-workspace P'
    ctrl-alt-cmd-q = 'move-node-to-workspace Q'
    ctrl-alt-cmd-r = 'move-node-to-workspace R'
    ctrl-alt-cmd-s = 'move-node-to-workspace S'
    ctrl-alt-cmd-t = 'move-node-to-workspace T'
    ctrl-alt-cmd-u = 'move-node-to-workspace U'
    ctrl-alt-cmd-v = 'move-node-to-workspace V'
    ctrl-alt-cmd-w = 'move-node-to-workspace W'
    ctrl-alt-cmd-x = 'move-node-to-workspace X'
    ctrl-alt-cmd-y = 'move-node-to-workspace Y'
    ctrl-alt-cmd-z = 'move-node-to-workspace Z'

    # Workspace monitor https://nikitabobko.github.io/AeroSpace/commands#move-workspace-to-monitor
    ctrl-alt-shift-tab = 'move-workspace-to-monitor --wrap-around next'
     
    # Workspace recent https://nikitabobko.github.io/AeroSpace/commands#workspace-back-and-forth
    ctrl-alt-tab = 'workspace-back-and-forth'
#+end_src

***** Service Mode
#+begin_src toml :tangle "./dot_config/aerospace/aerospace.toml"
[mode.service.binding]
    esc = ['reload-config', 'mode main']

    # Window float toggle
    f = ['layout floating tiling', 'mode main']

    # r = ['flatten-workspace-tree', 'mode main'] # reset layout
    # backspace = ['close-all-windows-but-current', 'mode main']

    # sticky is not yet supported https://github.com/nikitabobko/AeroSpace/issues/2
    # s = ['layout sticky tiling', 'mode main']

    # alt-shift-h = ['join-with left', 'mode main']
    # alt-shift-j = ['join-with down', 'mode main']
    # alt-shift-k = ['join-with up', 'mode main']
    # alt-shift-l = ['join-with right', 'mode main']

    # down = 'volume down'
    # up = 'volume up'
    # shift-down = ['volume set 0', 'mode main']
#+end_src

***** Automations
#+begin_src toml :tangle "./dot_config/aerospace/aerospace.toml"
# To find an `app-id`, use `aerospace list-apps`
# https://nikitabobko.github.io/AeroSpace/commands#list-apps
 
# Automatically run functions for specific windows
# https://nikitabobko.github.io/AeroSpace/guide#on-window-detected-callback

# Only `move-node-to-workspace`, `layout tiling`, `layout floating` are supported
# https://github.com/nikitabobko/AeroSpace/issues/20
# this limitation is supposed to be removed in 0.2
# https://github.com/nikitabobko/AeroSpace/milestone/5
[[on-window-detected]]
  if.app-id = 'com.apple.ActivityMonitor'
  run = ['move-node-to-workspace A']

[[on-window-detected]]
  if.app-id = 'org.gnu.Emacs'
  run = ['move-node-to-workspace E']

[[on-window-detected]]
  if.app-id = 'com.google.Chrome'
  run = ['move-node-to-workspace C']

[[on-window-detected]]
  if.app-id = 'com.apple.finder'
  run = ['move-node-to-workspace F']

[[on-window-detected]]
  if.app-id = 'com.apple.Safari'
  run = ['move-node-to-workspace S']

[[on-window-detected]]
  if.app-id = 'com.mitchellh.ghostty'
  run = ['move-node-to-workspace T']

[[on-window-detected]]
  if.app-id = 'dev.zed.Zed'
  run = ['move-node-to-workspace Z']
#+end_src

*** built-in keeb
#+begin_src shell
# colemak-dh was originally called -dhm. now, m is implied.
# ISO: z at bottom left
echo "homebrew: colemak-dh keyboard variant"
brew install --cask colemak-dh
echo "log out for new keyboard layout to take affect"
#+end_src

*** git
**** aliases
oh-my-zsh git plugin comes with many aliases

*** github
**** SSH
***** authentication
***** signing

* Footnotes

[fn:1] https://www.chezmoi.io/reference/special-directories/chezmoiscripts/]
